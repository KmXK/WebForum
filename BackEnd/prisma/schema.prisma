generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model ComplaintAnswer {
  id           String    @id(map: "PK_ComplaintAnswers") @db.UniqueIdentifier @default(uuid())
  responderId  String    @db.UniqueIdentifier
  complaintId  String    @db.UniqueIdentifier
  text         String    @db.NVarChar(1024)
  responseTime DateTime  @db.DateTime
  complaint    Complaint @relation(fields: [complaintId], references: [id], onUpdate: NoAction, map: "FK_ComplaintAnswers_Complaints")
  responser    User      @relation(fields: [responderId], references: [id], onUpdate: NoAction, map: "FK_ComplaintAnswers_Users")

  @@map("ComplaintAnswers")
}

model Complaint {
  id            String            @id(map: "PK_Complaints") @db.UniqueIdentifier @default(uuid())
  complainantId String            @db.UniqueIdentifier
  accusedId     String            @db.UniqueIdentifier
  description   String            @db.NVarChar(1024)
  messageId     String?           @db.UniqueIdentifier
  creationTime  DateTime          @db.DateTime @default(now())
  answers       ComplaintAnswer[]
  message       Message?          @relation(fields: [messageId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Complaints_Messages")
  complaintant  User              @relation("Complaints_ComplainantIdToUsers", fields: [complainantId], references: [id], onUpdate: NoAction, map: "FK_Complaints_Users_ComplaintantId")
  accusedUser   User              @relation("Complaints_AccusedIdToUsers", fields: [accusedId], references: [id], onUpdate: NoAction, map: "FK_Complaints_Users_AccusedId")

  @@map("Complaints")
}

model DirectMessage {
  id          String  @db.UniqueIdentifier @default(uuid())
  messageType Int     @db.SmallInt @default(0)
  recipientId String  @db.UniqueIdentifier
  message     Message @relation(fields: [id, messageType], references: [id, messageType], onUpdate: NoAction, map: "FK_DirectMessages_Messages")
  reciepient  User    @relation(fields: [recipientId], references: [id], onUpdate: NoAction, map: "FK_DirectMessages_Users")

  @@id([id, messageType], map: "PK_DirectMessages")
  @@map("DirectMessages")
}

model MessageRate {
  messageId  String  @db.UniqueIdentifier
  userId     String  @db.UniqueIdentifier
  isPositive Boolean
  message    Message @relation(fields: [messageId], references: [id], onUpdate: NoAction, map: "FK_MessageRates_Messages")
  user       User    @relation(fields: [userId], references: [id], onUpdate: NoAction, map: "FK_MessageRates_Users")

  @@id([messageId, userId], map: "PK_MessageRates")
  @@index([isPositive], map: "IX_MessageRates_IsPositive")
  @@map("MessageRates")
}

model Message {
  id              String         @id(map: "PK_Messages") @db.UniqueIdentifier @default(uuid())
  senderId        String         @db.UniqueIdentifier
  text            String         @db.NVarChar(Max)
  creationTime    DateTime       @db.DateTime @default(now())
  parentMessageId String?        @db.UniqueIdentifier
  messageType     Int            @db.SmallInt
  isDeleted       Boolean        @default(false)
  complaints      Complaint[]
  directMessage   DirectMessage?
  topicMessage    TopicMessage?
  messageRates    MessageRate[]
  parentMessage   Message?       @relation("MessagesToMessages", fields: [parentMessageId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Messages_Messages_ParentMessageId")
  childMessages   Message[]      @relation("MessagesToMessages")
  type            MessageType    @relation(fields: [messageType], references: [id], onUpdate: NoAction, map: "FK_Messages_MessageTypes")
  sender          User           @relation(fields: [senderId], references: [id], onUpdate: NoAction, map: "FK_Messages_Users")

  @@unique([id, messageType], map: "IX_Messages")
  @@index([creationTime], map: "IX_Messages_CreationTime")
  @@map("Messages")
}

model MessageType {
  id       Int       @id(map: "PK_MessageTypes") @db.SmallInt
  name     String    @db.VarChar(50)
  messages Message[]

  @@map("MessageTypes")
}

model Notification {
  id          String  @id(map: "PK_Notifications") @db.UniqueIdentifier @default(uuid())
  userId      String  @db.UniqueIdentifier
  isImportant Boolean
  text        String  @db.NVarChar(1024)
  isRead      Boolean
  user        User    @relation(fields: [userId], references: [id], onUpdate: NoAction, map: "FK_Notifications_Users")

  @@index([userId, isRead], map: "IX_Notifications_UserId_IsRead")
  @@map("Notifications")
}

model Penalty {
  id             String      @id(map: "PK_Penalties") @db.UniqueIdentifier @default(uuid())
  executorId     String      @db.UniqueIdentifier
  punishedUserId String      @db.UniqueIdentifier
  reason         String      @db.NVarChar(1024)
  typeId         Int         @db.SmallInt
  startTime      DateTime    @db.DateTime
  endTime        DateTime    @db.DateTime
  creationTime   DateTime    @db.DateTime @default(now())
  type           PenaltyType @relation(fields: [typeId], references: [id], onUpdate: NoAction, map: "FK_Penalties_PenaltyTypes")
  executor       User        @relation("Penalties_ExecutorIdToUsers", fields: [executorId], references: [id], onUpdate: NoAction, map: "FK_Penalties_Users_ExecutorId")
  punishedUser   User        @relation("Penalties_PunishedUserIdToUsers", fields: [punishedUserId], references: [id], onUpdate: NoAction, map: "FK_Penalties_Users_PunishedUserId")

  @@index([endTime(sort: Desc), punishedUserId], map: "IX_Penalties_EndTime_PunishedUserId")
  @@map("Penalties")
}

model PenaltyType {
  id        Int       @id(map: "PK_PenaltyTypes") @db.SmallInt
  name      String    @db.VarChar(50)
  penalties Penalty[]

  @@map("PenaltyTypes")
}

model Section {
  id              Int       @id(map: "PK_Sections") @default(autoincrement())
  name            String    @db.NVarChar(256)
  authorId        String    @db.UniqueIdentifier
  parentSectionId Int?
  creationTime    DateTime  @db.DateTime @default(now())
  description     String?   @db.NVarChar(Max)
  parentSection   Section?  @relation("SectionsToSections", fields: [parentSectionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Sections_Sections_ParentSectionId")
  childSections   Section[] @relation("SectionsToSections")
  author          User      @relation(fields: [authorId], references: [id], onUpdate: NoAction, map: "FK_Sections_Users")
  topics          Topic[]

  @@index([creationTime], map: "IX_Sections_CreationTime")
  @@index([name], map: "IX_Sections_Name")
  @@map("Sections")
}

model Tag {
  id        Int        @id(map: "PK_Tags")
  name      String     @db.NVarChar(50)
  topicTags TopicTag[]

  @@map("Tags")
}

model TopicMessage {
  id          String  @db.UniqueIdentifier @default(uuid())
  messageType Int     @db.SmallInt @default(1)
  topicId     String  @db.UniqueIdentifier
  message     Message @relation(fields: [id, messageType], references: [id, messageType], onUpdate: NoAction, map: "FK_TopicMessages_Messages")
  topic       Topic   @relation(fields: [topicId], references: [id], onUpdate: NoAction, map: "FK_TopicMessages_Topics")

  @@id([id, messageType], map: "PK_TopicMessages")
  @@map("TopicMessages")
}

model Topic {
  id            String         @id(map: "PK_Topics") @db.UniqueIdentifier @default(uuid())
  name          String         @db.NVarChar(256)
  sectionId     Int
  authorId      String         @db.UniqueIdentifier
  creationTime  DateTime       @db.DateTime @default(now())
  isImportant   Boolean
  closingTime   DateTime?      @db.DateTime
  topicMessages TopicMessage[]
  section       Section        @relation(fields: [sectionId], references: [id], onUpdate: NoAction, map: "FK_Topics_Sections")
  author        User           @relation(fields: [authorId], references: [id], onUpdate: NoAction, map: "FK_Topics_Users")
  topicTags     TopicTag[]

  @@index([closingTime], map: "IX_Topics_ClosingDate")
  @@index([name], map: "IX_Topics_Name")
  @@map("Topics")
}

model TopicTag {
  topicId String @db.UniqueIdentifier @default(uuid())
  tagId   Int
  tag     Tag    @relation(fields: [tagId], references: [id], onUpdate: NoAction, map: "FK_TopicsTags_Tags")
  topic   Topic  @relation(fields: [topicId], references: [id], onUpdate: NoAction, map: "FK_TopicsTags_Topics")

  @@id([topicId, tagId], map: "PK_TopicsTags")
  @@map("TopicsTags")
}

model User {
  id                     String            @id(map: "PK_Users") @db.UniqueIdentifier @default(uuid())
  login                  String            @unique(map: "IX_Users_Login") @db.VarChar(100)
  firstName              String?           @db.NVarChar(100)
  lastName               String?           @db.NVarChar(100)
  email                  String?           @db.VarChar(255)
  passwordHash           Bytes             @db.Binary(64)
  passwordSalt           Bytes             @db.Binary(64)
  avatarUrl              String?           @db.NVarChar(256)
  roleId                 Int               @db.SmallInt
  refreshToken           String?           @db.NVarChar(512)
  complaintAnswers       ComplaintAnswer[]
  complaintantComplaints Complaint[]       @relation("Complaints_ComplainantIdToUsers")
  accusedComplaints      Complaint[]       @relation("Complaints_AccusedIdToUsers")
  directMessages         DirectMessage[]
  messageRates           MessageRate[]
  messages               Message[]
  notifications          Notification[]
  executorPenalties      Penalty[]         @relation("Penalties_ExecutorIdToUsers")
  punishedPenalties      Penalty[]         @relation("Penalties_PunishedUserIdToUsers")
  sections               Section[]
  topics                 Topic[]
  role                   Role              @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Users_Roles")

  @@index([email], map: "IX_Users_Email")
  @@map("Users")
}

model Role {
  id    Int    @id(map: "PK_Roles") @db.SmallInt
  name  String @db.VarChar(50)
  users User[]

  @@map("Roles")
}
